- - - ( Laravel Eloquent ) - - -


** ( Understanding Eloquent ): 

- {"Eloquent"}, is an "ORM( Object Relational Mapper )"
  
  w/"Eloquent", each "DB table" has a "corresponding model",
  used to "interact" w/ that "table"( making "queries" )
  • retrieving
  • insert 
  • update 
  • delete 

  to create an Elqouent Model, we can use the command...
  CMD: { php artisan make:model *Present_table_name }

  provides a convenient overview of all the model's attributes and relations
  CMD: { php artisan model:show *Present_table_name }

  models generated by the command, is placed in the "app/Models directory" 


  
- Since each "Model" corresponds w/the "Present Table" in the DB,
  and the "Model", "represents" the "table" itself

  we must tell our app, which Model Corresponds a table in the DB


  ( Methods ):   

  1) {"Snake Case"}, "plural name" of the "class", will be used to "locate" the "table name" 
     // Note: this "functionality" is fixed, "Snake Case" doesnt work in "Vice Versa" 
     // Tip: This works well w/"php artisan make:model *Present_table_name --migration"
  

  2) {"protected $table = 'flight';"}, under the "model class", you may 
     defined a "table property", w/the "Table name" as its value  




** ( What You Should Do w/Eloquent Models ):

| Task                        | What You Do                                      | Purpose                                |
| --------------------------- | ------------------------------------------------ | -------------------------------------- |
| 🏗️ **Define Models**       | Create a model per table                         | Represent database tables in PHP       |
| ⚙️ **Configure Mapping**    | `$table`, `$fillable`, `$primaryKey`, etc.       | Control how Eloquent interacts with DB |
| 💾 **Perform CRUD**         | Use `create()`, `find()`, `update()`, `delete()` | Manipulate data without SQL            |
| 🔗 **Define Relationships** | `hasMany()`, `belongsTo()`, etc.                 | Link models together                   |
| 🧠 **Add Logic**            | Add helper methods or computed fields            | Keep logic close to the data           |
| 🔍 **Query**                | Use `where()`, `get()`, `orderBy()`, etc.        | Fetch data cleanly                     |

  


** ( Eloquent Configurations ):    

- The "Method 2", in the "Understanding Eloquent", is an example of 
  "Eloquent Model/Table Configuration", below are more samples related to it 

  for more indepth samples, you can visit here...
  https://laravel.com/docs/12.x/eloquent#eloquent-model-conventions


 
 ( Samples ):   

 {Primary Key}
 - Eloquent, assumes the Id of the table is the Primary Key by default,
   to override: {"protected $primaryKey = '*table_pk_name';"}    

   Eloquent also assumes, Primary Keys are auto-incremented,
   to override: {"public $incrementing = false;"}

   We can also override its type w/{"protected $keyType = 'string';"}


 {Timestamp}
 - Eloquent by default expect some "timestamp columns" to be 
   available on the table, e.g.. "created_at" & "updated_at" 

   which will be automatically "set/assigned" by Eloquent, 
   during... "Model Creation / Updates"
   ( This could trigger errors, if timestamp columns aren't present )

   to override: {"public $timestamps = false;"}

   
   We can also disable/assign certain timestamp columns, e.g..
   
   ASSIGNING
   • CONST CREATED_AT = "*Column Name"; 
   • CONST UPDATED_AT = "*Column Name"; 

   DISABLING
   • CONST CREATED_AT = null; 
   • CONST UPDATED_AT = null; 
  



** ( Retrieving Models ):

- Once model and its associated database table, has been created,
  you can now retrieve data from the database... 

  ( Sample ):   
  use App\Models\*Model_name;

  foreach (*model_name::all() as $var_name) {
      echo $var_name -> *present_column_name;
  }
  //This method retrieves all records from the model's associated database table




** ( Eloquent Relationships ): 

- Database tables are often related to one another. Eloquent allows 
  managing & working w/these relationships by providing functionalities
  to managae a variety of common relationships, e.g..
  • One To One
  • One To Many
  • Many To Many
  • Has One Through
  • Has Many Through
  • One To One (Polymorphic)
  • One To Many (Polymorphic)
  • Many To Many (Polymorphic)

  you can visit the Docs below, for more info... 
  https://laravel.com/docs/12.x/eloquent-relationships
- - - ( Laravel Route Parameters ) - - -

- There are some cases, where we would want to 
  access values passed to the URL, e.g.. 
  • /transactions/{ID} 
  • /users/{ID}

  we can do this by using "route parameters"
  ( can also be used w/the controller )   

  Note: Use "Route Params", IF URL Endpoint values are 
        needed ( e.g.. finding specific resource )


  ( Sample Code ):    

   Route::get('/transaction/{userID}/{message}', function ($userID, $message) {
       return "User: {$userID} <br> Message: {$message}";
   });
   /* 
   (URL):
   http://localhost:8000/transaction/Uel/Goodmorning

   (Output):
   User: Uel
   Message: Goodmorning

   The function parameters will take values passed on The URL Parameter, In order
   */



- There are also some cases where, we would
  want a parameter to be "optional"


  ( Sample Code ):    

   Route::get('/transaction/{userID}/{message?}', function ($userID, $message = null) {
       return "User: {$userID} <br> Message: {$message}";
   });
      /* 
   (URL):
   http://localhost:8000/transaction/Uel

   (Output):
   User: Uel
   Message: 

   If a value has been passed on the "Optional Parameter", then that parameter
   will take the value, IF not, then it would take the assigned default value   

   Note: 
   For optional parameters, they're required to have 
   a default value, otherwise, there would be errors 
   */



  (Note):
  
 - It's best practice to use "Route / Path parameters" 
   for identifiying a...
   "specific resource" / "relationship within RESTful APIs"


 - besides of setting the parameters, using route parameters,
   Users can also use "Query String Paramters"

   in some cases, its better to use "Query Strings" instead 
   of "Route parameters", especially in dealing w/... 
   • filter  
   • sorting
   • pagination
   • etc...
   
   or working with a "resource", e.g..
   • transaction
   • file
   • report ( where you're passing a reportID ) 

   Sample URL: 
   /report/{reportID}?year={year_num}&month={month_num} 




** ( Dependency Injection, within the Route Actions ):  

- "Routes" may also have "dependencies", Laravel allows 
  Users to "inject classes" in the "route actions"

  whether "controller / callback", Laravel's 
  "Service Container" will automatically "resolve" them 


  ( Sample Code: Dealing with "Query Strings" & "Request Dependency" ):  
  
    Route::get('/report/{reportID}', function (\Illuminate\Http\Request $request, $reportID) {
      $year = $request->get('year');   
      $month = $request->get('month');


      return "Generating Report {$reportID} for {$year} and {$month}";
   });
      /* 
   (URL):
   1) http://localhost:8000/report/reportId?year=2025&month=2
   2) http://localhost:8000/report/reportId

   (Output):
   1) "Generating Report reportId for 2025 and 2"
   2) "Generating Report reportId for and"

  
   Note: Its better to put the "Injected Dependencies" 
         before The "Route Parameters" in the "function"
         ( especially w/Route Parameters )
   */




** ( REGEX w/Route Function Parameters ):  

- the only way to strict type to your parameters is 
  through "constraints" or "REGEX w/Method Chain", e.g..
  "Route::(...)->where( *query_name, *expression )"


* ( Example ):  

  ( Method Chain )
  Route::(...)
  ->where( 'reportId' , '[0-9]+' )
  ->where( 'fileId' , '[0-9]+' )


  ( Array Containing REGEX as key value pairs )
  Route::(...)->where( ['reportId' => '[0-9]+', 'fileId' => '[0-9]+',]);


  - Users, can simplify the addition of constraints & also lessen  
    duplication of the "->where()" method, by adding the constraints 
    in the "boot function" of the "AppServiceProvider.php"
  

  ( Example ):    

  public function boot(): void
  {
   Route::pattern( 'reportId' , '[0-9]+' );
   Route::pattern( 'fileId' , '[0-9]+' );
  }
  //Then w/this, you no longer need to do "Method Chain" & "REGEX Array" 


- Laravel also provides multiple, "where->(...);" method constraints, e.g..
  • ->whereNumber($param) // Integers only ([0-9]+)
  • ->whereAlpha($param)  // Only alphabetic ([a-zA-Z]+)
  • ->whereAlphaNumeric($param) //Only alphanumeric ([a-zA-Z0-9]+
  • etc...


- For file types, you can create another script
  containing PHP ENUMS & pass the File path in 
  the Route parameter & get its value
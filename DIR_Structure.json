- - - ( Laravel Directory Structure ) - - -

- Note: as you start using The "Laravel Framework Features",
        you will "discover / unlock" additional folders

        & also, you will be spending most of your time 
        within the "app directory" & "resources directory" 
        ( atleast in the beginning )



** ( {App} directory ):  

- has three folders ( HTTP, Models & Providers ),
  but more folders & files will be added here overtime


 - the app directory contains the core code 
   of the application



* ( "HTTP" Directory ):  

- currently only has the "Controllers" directory
  & the "base controller", but...

  it will also have the "middleware" & the "form requests",
  later on...


 - HTTP directory contains, almost all of the applications 
   request related logic 



* ( "Models" Directory ):  

- by default, it only contains the table( User.php ),
  for the users table 


- contains all of the "eloquent model classes"
  ( eloquent is laravel's ORM )

  each databse table, would have a coressponding model,
  that is used to query, update & simply interact 
  w/the table          



* ( "Providers" Directory ):   

- by default, it only contains the AppServiceProvider.php, but... 
  later on, users would add their own custom service providers,

  which would be created, under this "providers directory"


- contains classes that help bootstrap the application


- Note: not all service providers are visible in this Directory,
        most services are framework specific service providers  



** ( {Bootstrap} directory ): 

- it contains the "app.php", responsible for 
  "bootstrapping" the "framework" 

- it also contains the "providers.php", responsible to 
  "register" the "service providers", e.g..

  inside the "providers.php file", it registered the,
  {"App\Providers\AppServiceProvider::class"}

  ( later on you can add more "service providers" in this file )


* ( "Cache" directory ):

- contains the cached framework generated files, e.g..
 • packages
 • services
 • routes 
 • etc...
 to boost performance



** ( {Config} directory ): 

- contains all of the apps config files,
  
  recommended not to touch, but to read 
  through available options
  
  in order to understand and know what they are  



** ( {Database} directory ):

- contains factories, migrations & seeders, 
  short explanation...
  
  model factories & seeders are mostly used for 
  testing unit & feature tests
  
  migrations are database schema related files 



** ( {Public} directory ):

- the "document root", it contains the index.php
  where all requests go through 

  it will also contains "assets", e.g..
  • images
  • compiled CSS  
  • compiled JS
  • etc...



** ( {Resources} directory ):

- contains the "uncompiled assets", e.g.. CSS & JS 

- it also contains the User's frontend and views, e.g..
  "blade templates" etc..
  


** ( {Routes} directory ):

- it contains the... 
  • "web routes" under "web.php"( located in this file )
  • "console based commands" under "console.php"( closure-defined, small commands )

  these are just defaults, which users can have different 
  route files, e.g.. 
  
  if your application provides "rest API", then you may add 
  an "api.php" under this directory 

  which might have a different set of "middlewares" applied,
  than the "web.php"
  ( in which the web.php, can just contain the stateful routes )



** ( {Storage} directory ):

- it contains the...
  • application logs 
  • files generated by the "application"
  • files generated by the "framework"
  
  
- Note: if you dont use a "remote storage" solution,
        e.g.. "wss3"

        then users can decided to store some of 
        their files, somewhere in this directory


- Files generated by the framework, are files like...
  • file based sessions
  • caches
  • compiled blade templates
  • etc...



** ( {Tests} directory ):

- contains the users "unit test" & "feature tests",
  to simplify.. The "PHP Unit \ PEST tests"


- "PHP Unit" is the testing framework, laravel provides,
   tons of helper methods, that makes writing tests easier 


- "PEST" is also a testing framework, which gives more features,
   and simplifies the process to write tests
   ( w/more of a function programming approach & field )
   
   it's built on top of "PHP Unit", which allows you to use 
   "PHP Unit features" & also provides a "developer friendly API" 
